migration-process.txt
Created Tue Jan 26 13:34:34 AKST 2016
Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>


Migration process for subversion to git


1. Install subversion, subversion-tools, and packages as needed:
# aptitude update
# aptitude upgrade
# aptitude install subversion
# aptitude install subversion-tools
# aptitude install git
# aptitude install git-extras
# aptitude install git-svn

2. Checkout repo to covert (to bornite it this example):
$ mkdir -p ~/svn
$ cd ~/svn
$ svn co svn+ssh://htpc/data/svnroot/software/software
A    software/README
A    software/links.txt
A    software/svn_ext_val.txt
A    software/software.txt
...
Checked out revision 15.

Fetching external item into 'software/window-manager/xorg/syntax':
A    software/window-manager/xorg/syntax/syntax.txt
A    software/window-manager/xorg/syntax/xserver.txt
A    software/window-manager/xorg/syntax/README
Checked out external at revision 3.

Checked out revision 5.
Checked out revision 10.
Checked out revision 9.
$


3. Create a file called users.txt that has this mapping in a format like this:
chacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>

Extract list of authors that svn users:
$ cd ~/svn/software
$ svn log --xml | grep author | sort -u | \
  perl -pe 's/.*&gt;(.*?)&lt;.*/$1 = /' > users.txt
$

$ cat users.txt
<author>marcilr</author>

Clean up generated users.txt:
$ sed -i 's:<author>marcilr</author>:\
marcilr = Raymond Marcil <marcilr@gmail.com>:g' users.txt

$ cat users.txt
marcilr = Raymond Marcil <marcilr@gmail.com>

Looks good.  Granted very short user list.

4. Convert subversion repo to git using 'gti svn':
$ git svn clone svn+ssh://marcilr@htpc/data/svnroot/software/software/ \
--authors-file=users.txt --no-metadata my_project
        A       links.txt
r1 = 15bd65fc712aa59001b8dc4f69073ed5dc04a426 (refs/remotes/git-svn)
        A       software.txt
r2 = ca2676de4a5aeb5588fd20a7ef653c0a30f4f2db (refs/remotes/git-svn)
        A       svn_ext_val.txt
r3 = 98d8783e654abbf4742a138092cdaf6919fcd05a (refs/remotes/git-svn)
        A       README
r4 = ed81fdf15b37f9427fc85a8fb4d6172b891456a7 (refs/remotes/git-svn)
        M       svn_ext_val.txt
r5 = ac2ffefc17f9cbae3f26c5a4b6e3a25a11542f5d (refs/remotes/git-svn)
        M       svn_ext_val.txt
r6 = c773647d43647b5f26cb2a0f71bf1619020c17d7 (refs/remotes/git-svn)
        M       svn_ext_val.txt
r7 = 503007ca5685634093544cf714b4af92a8203b2a (refs/remotes/git-svn)
        M       svn_ext_val.txt
r8 = 484bd5ec64d03f32d6af81e34fdc59b26acf0b17 (refs/remotes/git-svn)
        M       svn_ext_val.txt
r9 = 6af246fb9e28e78677f54ef2dc494b478c9ae43d (refs/remotes/git-svn)
Checked out HEAD:
  svn+ssh://marcilr@htpc/data/svnroot/software/software r9
$ 

Check log entries appears to have worked fine.

Options:
  --authors-file     If this option is specified and git svn encounters an
                     SVN committer name that does not exist in the authors-file,
                     git svn will abort operation.  The user will then have to
                     add the appropriate entry.  Re-running the previous git
                     svn command after the authors-file is modified should
                     continue operation.
                     -- git-scm.com/docs/git-svn/1.7.7.2

  --no-metadata      Set the noMetadata option in the [svn-remote] config.
                     This option is not recommended, please read the
                     svn.noMetadata section of this manpage before using
                     this option.
                     -- man git svn

5. You should also do a bit of post-import cleanup.  For one thing, you should
clean up the weird references that git svn set up. First you'll move the
tags so they're actual tags rather than strange remote branches, and then
you'll move the rest of the branches so they're local.

To move the tags to be proper Git tags, run:

  $ cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/
  $ rm -Rf .git/refs/remotes/origin/tags

This takes the references that were remote branches that started with
remotes/origin/tags/ and makes them real (lightweight) tags.

Next, move the rest of the references under refs/remotes to be local branches:

  $ cp -Rf .git/refs/remotes/origin/* .git/refs/heads/
  $ rm -Rf .git/refs/remotes/origin
    
It may happen that you'll see some extra branches which are suffixed by
@xxx (where xxx is a number), while in Subversion you only see one branch.
This is actually a Subversion feature called "peg-revisions", which is
something that Git simply has no syntactical counterpart for.  Hence, git svn
simply adds the svn version number to the branch name just in the same way as
you would have written it in svn to address the peg-revision of that branch.
If you do not care anymore about the peg-revisions, simply remove them using
git branch -d.

Now all the old branches are real Git branches and all the old tags are real
Git tags.

There's one last thing to clean up.  Unfortunately, git svn creates an extra
branch named trunk, which maps to Subversion's default branch, but the trunk
ref points to the same place as master.  Since master is more idiomatically
Git, here's how to remove the extra branch:

  $ git branch -d trunk

6. To add empty github remote to push repo to:
$ git remote add <shortname> <url>

For example:
  bornite:~/svn/software/my_project$ git remote add \
  origin https://github.com/marcilr/git-software

  bornite:~/svn/software/my_project$ git remote -v
  origin  https://github.com/marcilr/git-software (fetch)
  origin  https://github.com/marcilr/git-software (push)
  marcilr@bornite:~/svn/software/my_project$

  Now push to github repo:
  bornite:~/svn/software/my_project$ git push origin master
  Username for 'https://github.com': marcilr
  Password for 'https://marcilr@github.com':
  Counting objects: 27, done.
  Delta compression using up to 2 threads.
  Compressing objects: 100% (26/26), done.
  Writing objects: 100% (27/27), 15.26 KiB | 0 bytes/s, done.
  Total 27 (delta 12), reused 0 (delta 0)
  To https://github.com/marcilr/git-software
   * [new branch]      master -> master
  bornite:~/svn/software/my_project$

7. The last thing to do is add your new Git server as a remote and push to it.
Here is an example of adding your server as a remote:

$ git remote add origin git@my-git-server:myrepository.git
Because you want all your branches and tags to go up, you can now run this:

  $ git push origin --all
  $ git push origin --tags

All your branches and tags should be on your new Git server in a nice, clean
import.

-- git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git


Links
=====
9.2 Git and Other Systems - Migrating to Git
Git Pro, 2nd Edition (2014)
https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git

git-svn(1) Manual Page
git-svn - Bidirectional operation between a Subversion repository and git
git --local-branching-on-the-cheap
https://git-scm.com/docs/git-svn/1.7.7.2
